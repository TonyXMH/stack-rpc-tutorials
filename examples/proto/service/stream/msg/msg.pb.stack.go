// Code generated by protoc-gen-stack. DO NOT EDIT.
// source: msg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/stack-labs/stack-rpc/api"
	client "github.com/stack-labs/stack-rpc/client"
	server "github.com/stack-labs/stack-rpc/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MsgStream service

func NewMsgStreamEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MsgStream service

type MsgStreamService interface {
	Msg(ctx context.Context, opts ...client.CallOption) (MsgStream_MsgService, error)
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...client.CallOption) (*HeartBeatRespond, error)
}

type msgStreamService struct {
	c    client.Client
	name string
}

func NewMsgStreamService(name string, c client.Client) MsgStreamService {
	return &msgStreamService{
		c:    c,
		name: name,
	}
}

func (c *msgStreamService) Msg(ctx context.Context, opts ...client.CallOption) (MsgStream_MsgService, error) {
	req := c.c.NewRequest(c.name, "MsgStream.Msg", &StreamMessage{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &msgStreamServiceMsg{stream}, nil
}

type MsgStream_MsgService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamMessage) error
}

type msgStreamServiceMsg struct {
	stream client.Stream
}

func (x *msgStreamServiceMsg) Close() error {
	return x.stream.Close()
}

func (x *msgStreamServiceMsg) Context() context.Context {
	return x.stream.Context()
}

func (x *msgStreamServiceMsg) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *msgStreamServiceMsg) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *msgStreamServiceMsg) Send(m *StreamMessage) error {
	return x.stream.Send(m)
}

func (c *msgStreamService) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...client.CallOption) (*HeartBeatRespond, error) {
	req := c.c.NewRequest(c.name, "MsgStream.HeartBeat", in)
	out := new(HeartBeatRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgStream service

type MsgStreamHandler interface {
	Msg(context.Context, MsgStream_MsgStream) error
	HeartBeat(context.Context, *HeartBeatRequest, *HeartBeatRespond) error
}

func RegisterMsgStreamHandler(s server.Server, hdlr MsgStreamHandler, opts ...server.HandlerOption) error {
	type msgStream interface {
		Msg(ctx context.Context, stream server.Stream) error
		HeartBeat(ctx context.Context, in *HeartBeatRequest, out *HeartBeatRespond) error
	}
	type MsgStream struct {
		msgStream
	}
	h := &msgStreamHandler{hdlr}
	return s.Handle(s.NewHandler(&MsgStream{h}, opts...))
}

type msgStreamHandler struct {
	MsgStreamHandler
}

func (h *msgStreamHandler) Msg(ctx context.Context, stream server.Stream) error {
	return h.MsgStreamHandler.Msg(ctx, &msgStreamMsgStream{stream})
}

type MsgStream_MsgStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamMessage, error)
}

type msgStreamMsgStream struct {
	stream server.Stream
}

func (x *msgStreamMsgStream) Close() error {
	return x.stream.Close()
}

func (x *msgStreamMsgStream) Context() context.Context {
	return x.stream.Context()
}

func (x *msgStreamMsgStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *msgStreamMsgStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *msgStreamMsgStream) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *msgStreamHandler) HeartBeat(ctx context.Context, in *HeartBeatRequest, out *HeartBeatRespond) error {
	return h.MsgStreamHandler.HeartBeat(ctx, in, out)
}
